#@ load("@ytt:template", "template")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:library", "library")

#@ def credhub_values():
key_store_password: "{{.Values.keyStorePassword}}"
trust_store_password: "{{.Values.trustStorePassword}}"
encryption_password: "{{.Values.encryptionPassword}}"
use_local_image: false
uaa_url: http://uaa:8443

database:
  scheme: postgres
  username: credhub
  password: "{{.Values.postgresqlPassword}}"
  address: "${CREDHUB_POSTGRES_HOST}"
  port: 5432
  name: credhub
#@ end

#@ credhub = library.get("credhub")

#@ credhub_with_vals = credhub.with_data_values(credhub_values())
#@ credhub_config = credhub_with_vals.export("config")

---
apiVersion: quarks.cloudfoundry.org/v1alpha1
kind: QuarksSecret
metadata:
  name: credhub-config
  namespace: concourse
spec:
  type: templatedconfig
  secretName: credhub-config
  request:
    templatedConfig:
      type: helm
      templates:
        application.yml: #@ yaml.encode(credhub_config())
      values:
        postgresqlPassword:
          name: "credhub-postgresql-password"
          key: "password"
        keyStorePassword:
          name: "credhub-keystore-key"
          key: "password"
        trustStorePassword:
          name: "credhub-truststore-key"
          key: "password"
        encryptionPassword:
          name: "encryption-key"
          key: "password"

---
apiVersion: quarks.cloudfoundry.org/v1alpha1
kind: QuarksSecret
metadata:
  name: credhub-keystore-key
  namespace: concourse
spec:
  type: password
  secretName: credhub-keystore-key

---
apiVersion: quarks.cloudfoundry.org/v1alpha1
kind: QuarksSecret
metadata:
  name: credhub-truststore-key
  namespace: concourse
spec:
  type: password
  secretName: credhub-truststore-key


---
apiVersion: quarks.cloudfoundry.org/v1alpha1
kind: QuarksSecret
metadata:
  namespace: concourse
  name: credhub.ca
spec:
  request:
    certificate:
      alternativeNames: null
      commonName: CA
      isCA: true
      signerType: local
  secretName: credhub.ca
  type: certificate