#@ load("@ytt:library", "library")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")
#@ load("@ytt:yaml", "yaml")

#@ def add_concourse_namespace():
#@overlay/match by=overlay.all, expects="1+"
---
metadata:
  #@overlay/match missing_ok=True
  namespace: concourse
#@ end

#@ def uaa_values():
namespace: concourse

admin:
  client_secret: AdminSecretValueNotUsed

database:
  url: jdbc:postgresql://${UAA_POSTGRES_HOST}:5432/uaa?sslmode=disable
  scheme: postgresql

#! the values below and are only used for rendering, the actual sconfiguration is in `secret/uaa.yml`
jwt:
  policy:
    activeKeyId: "default_jwt_policy_key"
    keys:
      #@overlay/match missing_ok=True
      default_jwt_policy_key:
        signingKey: JWTSecretValueNotUsed

encryption:
  active_key_label: "default_encryption_key"
  #@overlay/replace
  encryption_keys:
  - label: default_encryption_key
    passphrase: EncryptionSecretValueNotUsed

login:
  saml:
    activeKeyId: default_saml_key
    keys:
      #@overlay/match missing_ok=True
      default_saml_key:
        key: SAMLKeySecretValueNotUsed
        certificate: SAMLCERTSecretValueNotUsed
        passphrase: ""

#@ end

---

#@ def secret_uaa_client_credential_data(client_name, credentials):
oauth:
  #@yaml/text-templated-strings
  clients:
    (@= client_name @):
      secret: #@ credentials
#@ end

#@ uaa = library.get("uaa")
---
  #@ template.replace(overlay.apply(uaa.with_data_values(uaa_values()).eval(), add_concourse_namespace()))

---

#! Remove UAA-templated admin client-secret so we can generate the credentials w/ Quarks
#@ def remove_secret(name):
#@overlay/remove
kind: Secret
metadata:
  name: #@ name
#@ end

--- #@overlay/match by=overlay.subset(remove_secret("uaa-admin-client-credentials"))
--- #@overlay/match by=overlay.subset(remove_secret("encryption-keys"))
--- #@overlay/match by=overlay.subset(remove_secret("uaa-saml-keys"))
--- #@overlay/match by=overlay.subset(remove_secret("uaa-jwt-policy-signing-keys"))


#@ load("@uaa/k8s:templates/deployment.star",
#@  "secrets_dir")
#@overlay/match by=overlay.subset({"kind":"Deployment", "metadata":{"name":"uaa"}})
---
spec:
  template:
    spec: #! pod spec
      containers:
      #@overlay/match by="name"
      - name: uaa
        env:
        #@overlay/append
        - name: UAA_POSTGRES_HOST
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        volumeMounts:
        #@overlay/append
        - name: concourse-admin-user-credentials-file
          mountPath: #@ "{}/concourse_admin_user_credentials.yml".format(secrets_dir)
          subPath: concourse_admin_user_credentials.yml
          readOnly: true
      volumes:
      #@overlay/append
      - name: concourse-admin-user-credentials-file
        secret:
          secretName: uaa-concourse-admin-user-credentials