#@ load("@ytt:library", "library")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")
#@ load("@ytt:yaml", "yaml")

#@ def add_concourse_namespace():
#@overlay/match by=overlay.all, expects="1+"
---
metadata:
  #@overlay/match missing_ok=True
  namespace: concourse
#@ end

#@ def uaa_values():
admin:
  client_secret: SecretValueNotUsed

database:
  url: 127.0.0.1
  scheme: postgresql

jwt:
  policy:
    activeKeyId: "default_jwt_policy_key"
    keys:
      #@overlay/match missing_ok=True
      default_jwt_policy_key:
        signingKey: SecretValueNotUsed

encryption:
  active_key_label: "default_encryption_key"
  #@overlay/replace
  encryption_keys:
  - label: default_encryption_key
    passphrase: SecretValueNotUsed

login:
  saml:
    activeKeyId: default_saml_key
    keys:
      #@overlay/match missing_ok=True
      default_saml_key:
        key: SecretValueNotUsed
        passphrase: SecretValueNotUsed
        certificate: SecretValueNotUsed

#@ end

---

#@ def secret_uaa_client_credential_data(client_name, credentials):
oauth:
  #@yaml/text-templated-strings
  clients:
    (@= client_name @):
      secret: #@ credentials
#@ end

#@ def secret_uaa_client_credentials(client_name, credentials, secret_name):
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ secret_name
type: Opaque
stringData:
  client_credentials.yml: #@ yaml.encode(secret_uaa_client_credential_data(client_name, credentials))
#@ end

#! Remove UAA-templated admin client-secret so we can generate the credentials w/ Quarks
#@overlay/match by=overlay.subset({"kind":"Secret", "metadata":{"name":"uaa-admin-client-credentials"}})
#@overlay/remove

--- #@ template.replace(secret_uaa_client_credentials("cf", "", "uaa-cf-client-secret"))

#@ uaa = library.get("uaa")
---
  #!@ template.replace(uaa.with_data_values(uaa_values()).eval())
  #@ template.replace(overlay.apply(uaa.with_data_values(uaa_values()).eval(), add_concourse_namespace()))